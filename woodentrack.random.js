// Generated by CoffeeScript 1.7.1

/*
Ideas for random:
builder can randomly select next piece or what connection to add it to
constraints can be based on boundary, mix of pieces and number of allowed loose connections
1. completely random. unbounded
1a. completely random but with weights for occurance of pieces.
2. completely random. bounded by box. pieces cannot be added that break the boundary.  start in middle of box.
2a. completely random. bounded by box. pieces can break boundary but after each iteration remove section if boundary broken.
 */

(function() {
  var addRandom, root, startGenerator, stopGenerator;

  addRandom = function(track, num) {
    var getFreeConnection, _i, _results;
    getFreeConnection = function(piece, connections) {
      var clone, idx;
      if (connections.length === 0) {
        return null;
      } else {
        idx = Math.floor(Math.random() * connections.length);
        clone = track.clone();
        clone.connect(piece, connections[idx]);
        if (!clone.hasCollision()) {
          return connections[idx];
        } else {
          return getFreeConnection(piece, connections.splice(idx + 1));
        }
      }
    };
    return (function() {
      _results = [];
      for (var _i = 1; 1 <= num ? _i <= num : _i >= num; 1 <= num ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function() {
      var connection, connections, flip, piece, type;
      type = Math.floor(Math.random() * 6);
      flip = 2 * Math.round(Math.random()) - 1;
      switch (type) {
        case 0:
          piece = new Straight;
          break;
        case 1:
          piece = new Bend({
            flip: flip
          });
          break;
        case 2:
          piece = new Split({
            flip: flip
          });
          break;
        case 3:
          piece = new Merge({
            flip: flip
          });
          break;
        case 4:
          piece = new Join({
            flip: flip
          });
          break;
        case 5:
          piece = new Crossover({
            flip: flip
          });
      }
      connections = track.connections();
      if (track.pieces().length === 0) {
        return track.add(piece);
      } else {
        connection = getFreeConnection(piece, connections);
        if (connection != null) {
          return track.connect(piece, connection);
        }
      }
    });
  };

  startGenerator = function(track) {
    return this.generator = setInterval(function() {
      return addRandom(track, 1);
    }, 1000);
  };

  stopGenerator = function() {
    return clearInterval(this.generator);
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.addRandom = addRandom;

  root.startGenerator = startGenerator;

  root.stopGenerator = stopGenerator;

}).call(this);
