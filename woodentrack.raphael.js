// Generated by CoffeeScript 1.7.1
(function() {
  var RaphaelTrackPainter, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RaphaelTrackPainter = (function(_super) {
    var drawBend, drawLine;

    __extends(RaphaelTrackPainter, _super);

    function RaphaelTrackPainter(track, id, options) {
      var _ref, _ref1;
      if (options == null) {
        options = {};
      }
      this.width = (_ref = options.width) != null ? _ref : 800;
      this.height = (_ref1 = options.height) != null ? _ref1 : 400;
      this.paper = Raphael(document.getElementById(id), this.width, this.height);
      RaphaelTrackPainter.__super__.constructor.call(this, track, options);
      track.on('add remove change clear', this);
    }

    RaphaelTrackPainter.prototype.call = function(track, event) {
      return this.draw();
    };

    RaphaelTrackPainter.prototype.drawStraight = function(start, size) {
      return drawLine(this.paper, start.translateX, start.translateY, (start.translateX + Math.cos(start.rotateRads) * size * this.track.gridSize).toString(), (start.translateY + Math.sin(start.rotateRads) * size * this.track.gridSize).toString(), this.track.trackWidth, this.trackColor);
    };

    RaphaelTrackPainter.prototype.drawStraightRails = function(start, size) {
      var offsetX, offsetY;
      offsetX = Math.sin(start.rotateRads) * this.railGauge / 2;
      offsetY = -1 * Math.cos(start.rotateRads) * this.railGauge / 2;
      drawLine(this.paper, (start.translateX + offsetX).toString(), (start.translateY + offsetY).toString(), ((start.translateX + Math.cos(start.rotateRads) * size * this.track.gridSize) + offsetX).toString(), ((start.translateY + Math.sin(start.rotateRads) * size * this.track.gridSize) + offsetY).toString(), this.railWidth, this.railColor);
      return drawLine(this.paper, (start.translateX - offsetX).toString(), (start.translateY - offsetY).toString(), ((start.translateX + Math.cos(start.rotateRads) * size * this.track.gridSize) - offsetX).toString(), ((start.translateY + Math.sin(start.rotateRads) * size * this.track.gridSize) - offsetY).toString(), this.railWidth, this.railColor);
    };

    RaphaelTrackPainter.prototype.drawBend = function(start, end, flip) {
      var orbit;
      orbit = flip === 1 ? "1" : "0";
      return drawBend(this.paper, this.track.gridSize, start.translateX, start.translateY, end.translateX, end.translateY, orbit, this.track.trackWidth, this.trackColor);
    };

    RaphaelTrackPainter.prototype.drawBendRails = function(start, end, flip) {
      var endOffsetX, endOffsetY, orbit, startOffsetX, startOffsetY;
      orbit = flip === 1 ? "1" : "0";
      startOffsetX = Math.sin(start.rotateRads) * this.railGauge / 2;
      startOffsetY = -1 * Math.cos(start.rotateRads) * this.railGauge / 2;
      endOffsetX = Math.sin(end.rotateRads) * this.railGauge / 2;
      endOffsetY = -1 * Math.cos(end.rotateRads) * this.railGauge / 2;
      drawBend(this.paper, (this.track.gridSize - (flip * this.railGauge / 2)).toString(), (start.translateX + startOffsetX).toString(), (start.translateY + startOffsetY).toString(), (end.translateX + endOffsetX).toString(), (end.translateY + endOffsetY).toString(), orbit, this.railWidth, this.railColor);
      return drawBend(this.paper, (this.track.gridSize + (flip * this.railGauge / 2)).toString(), (start.translateX - startOffsetX).toString(), (start.translateY - startOffsetY).toString(), (end.translateX - endOffsetX).toString(), (end.translateY - endOffsetY).toString(), orbit, this.railWidth, this.railColor);
    };

    RaphaelTrackPainter.prototype.drawCode = function(start, text) {
      var el;
      el = this.paper.text(start.translateX, start.translateY, text);
      return el.attr({
        'class': 'code'
      });
    };

    RaphaelTrackPainter.prototype.drawCursor = function(start) {
      var cursor, offset, path;
      offset = 2;
      path = "M " + (offset + start.translateX) + " " + start.translateY + " L " + (offset + start.translateX) + " " + (start.translateY - (this.track.trackWidth / 2) + 3) + " L " + (start.translateX + this.track.trackWidth + offset - 7) + " " + start.translateY + " L " + (offset + start.translateX) + " " + (start.translateY + (this.track.trackWidth / 2) - 3);
      cursor = this.paper.path(path);
      cursor.attr({
        'fill': this.trackColor,
        'stroke-width': 0
      });
      cursor.rotate(start.rotateDegs, start.translateX, start.translateY);
      return cursor.toBack();
    };

    RaphaelTrackPainter.prototype._clear = function() {
      return this.paper.clear();
    };

    RaphaelTrackPainter.prototype.drawNobble = function(start) {
      var el;
      el = this.paper.circle(start.translateX, start.translateY, 2);
      return el.attr({
        'fill': 'white',
        'stroke': 'none'
      });
    };

    drawLine = function(paper, startX, startY, endX, endY, width, color) {
      var path, straight;
      path = "M" + startX + "," + startY + "L" + endX + "," + endY;
      straight = paper.path(path);
      return straight.attr({
        'stroke-width': width,
        'stroke': color
      });
    };

    drawBend = function(paper, gridSize, startX, startY, endX, endY, orbit, width, color) {
      var bend, path;
      path = "M" + startX + "," + startY + " A " + gridSize + "," + gridSize + " 0 0 " + orbit + " " + endX + "," + endY;
      bend = paper.path(path);
      return bend.attr({
        'stroke-width': width,
        'stroke': color
      });
    };

    return RaphaelTrackPainter;

  })(TrackPainter);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.RaphaelTrackPainter = RaphaelTrackPainter;

}).call(this);

//# sourceMappingURL=woodentrack.raphael.map
