// Generated by CoffeeScript 1.6.3
(function() {
  var D3TrackPainter, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  D3TrackPainter = (function(_super) {
    __extends(D3TrackPainter, _super);

    function D3TrackPainter(track, selector, options) {
      var vis;
      this.selector = selector;
      if (options == null) {
        options = {};
      }
      vis = d3.select('#' + this.selector).attr("pointer-events", "all").call(d3.behavior.zoom().on("zoom", function() {
        return vis.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")");
      })).append("svg:g");
      this.svg = d3.select('#' + this.selector + ' g');
      D3TrackPainter.__super__.constructor.call(this, track, options);
      track.on('add remove clear change', this);
    }

    D3TrackPainter.prototype.call = function(track, event) {
      var _this = this;
      switch (event.type) {
        case "add":
          this.svg.selectAll(".annotation").remove();
          this.svg.selectAll(".cursor").remove();
          if (this.showBBox) {
            event.target._setBBox(event.start);
          }
          event.target.draw(this, event.start);
          if (this.showCursor && (this.track.cursor() != null)) {
            this.drawCursor(this.track._transform(this.track.cursor()));
          }
          if (this.showCodes) {
            return this.track.connections().forEach(function(code) {
              return _this.drawCode(_this.track._transform(code).compound(_this.track._gapTransform), code);
            });
          }
          break;
        case "remove":
        case "change":
          return this.draw();
        case "clear":
          return this._clear();
      }
    };

    D3TrackPainter.prototype.drawStraight = function(start, size) {
      return this.drawStraightLine(start, size * this.track.gridSize, this.track.trackWidth, this.trackColor);
    };

    D3TrackPainter.prototype.drawStraightRails = function(start, size) {
      this.drawStraightLine(start.compound(new Transform(0, this.railGauge / 2, 0)), size * this.track.gridSize, this.railWidth, this.railColor);
      return this.drawStraightLine(start.compound(new Transform(0, -this.railGauge / 2, 0)), size * this.track.gridSize, this.railWidth, this.railColor);
    };

    D3TrackPainter.prototype.drawBend = function(start, end, flip) {
      return this.drawBendLine(start, end, flip, this.track.gridSize, this.track.trackWidth, this.trackColor);
    };

    D3TrackPainter.prototype.drawBendRails = function(start, end, flip) {
      var left, right;
      left = new Transform(0, this.railGauge / 2, 0);
      this.drawBendLine(start.compound(left), end.compound(left), flip, this.track.gridSize - (flip * this.railGauge / 2), this.railWidth, this.railColor);
      right = new Transform(0, -this.railGauge / 2, 180);
      return this.drawBendLine(start.compound(right), end.compound(right), flip, this.track.gridSize + (flip * this.railGauge / 2), this.railWidth, this.railColor);
    };

    D3TrackPainter.prototype.drawCode = function(start, text) {
      return this.svg.append("text").text(text).attr("x", start.translateX).attr("y", start.translateY).attr("class", "annotation").attr("font-family", "sans-serif").attr("font-size", this.railGauge).attr("fill", this.trackColor).attr("style", "font-weight:bold;").attr("text-anchor", "middle").attr("transform", "rotate(" + (start.rotateDegs + 90).toString() + " " + start.translateX.toFixed(2) + "," + start.translateY.toFixed(2) + ")");
    };

    D3TrackPainter.prototype.drawCursor = function(start) {
      var offset, path;
      offset = 2;
      if (this.showCodes) {
        offset += this.railGauge - 2;
      }
      path = "M " + (offset + start.translateX) + " " + start.translateY + " L " + (offset + start.translateX) + " " + (start.translateY - (this.track.trackWidth / 2) + 3) + " L " + (start.translateX + this.track.trackWidth + offset - 7) + " " + start.translateY + " L " + (offset + start.translateX) + " " + (start.translateY + (this.track.trackWidth / 2) - 3);
      return this.svg.append("path").attr("d", path).attr("class", "cursor").attr("fill", this.trackColor).attr("transform", "rotate(" + start.rotateDegs + " " + start.translateX.toFixed(2) + "," + start.translateY.toFixed(2) + ")");
    };

    D3TrackPainter.prototype.drawNobble = function(start) {
      return this.svg.append("circle").attr("r", 2).attr("stroke-width", 0).attr("fill", "white").attr("cx", start.translateX).attr("cy", start.translateY);
    };

    D3TrackPainter.prototype.drawBendLine = function(start, end, flip, radius, width, color) {
      var orbit, path;
      orbit = flip === 1 ? "1" : "0";
      path = "M" + start.translateX.toFixed(2) + "," + start.translateY.toFixed(2) + " A" + radius + "," + radius + " 0 0 " + orbit + " " + end.translateX.toFixed(2) + "," + end.translateY.toFixed(2);
      return this.svg.append("path").attr("fill", "none").attr("stroke-width", width).attr("stroke", color).attr("d", path);
    };

    D3TrackPainter.prototype.drawStraightLine = function(start, length, width, color) {
      var path;
      path = "M " + start.translateX + " " + start.translateY + " L " + (start.translateX + Math.cos(start.rotateRads) * length) + " " + (start.translateY + Math.sin(start.rotateRads) * length);
      return this.svg.append("path").attr("stroke-width", width).attr("stroke", color).attr("d", path);
    };

    D3TrackPainter.prototype.drawRectangle = function(x, y, width, height) {
      return this.svg.append("rect").attr("x", x).attr("y", y).attr("width", width).attr("height", height).attr("fill", "none").attr("stroke", "black").attr("stroke-width", 1);
    };

    D3TrackPainter.prototype._clear = function() {
      this.svg.selectAll("path").remove();
      this.svg.selectAll("text").remove();
      return this.svg.selectAll("rect").remove();
    };

    return D3TrackPainter;

  })(TrackPainter);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.D3TrackPainter = D3TrackPainter;

}).call(this);

/*
//@ sourceMappingURL=woodentrack.d3.map
*/
